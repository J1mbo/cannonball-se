.\" Manpage for CannonBall SE
.TH "cannonball-se" "6" "September 2025" "CannonBall SE 1.1" "CannonBall SE Configuration Help"
.SH OVERVIEW
\fBCannonBall-SE\fP is a fork of Chris White's incredible cross-platform OutRun engine optimised for home-brew arcade cabinets.
It adds adding enhanced image processing to provide an authentic CRT look, MP3 playback, and performance optimisations.

.SH OPTIONS
Command line options:
.RS
.IP \(bu 2
-h                  : Displays the command-line options and man page link, then quits
.IP \(bu 2
-list-audio-devices : Lists available playback devices, then quits
.IP \(bu 2
-cfgfile            : Set the location and name of config.xml
.IP \(bu 2
-file               : LayOut Editor track data to load (for custom routes)
.IP \(bu 2
-30 or -60          : Force 30 or 60fps operation (disables auto frame rate selection)
.IP \(bu 2
-t [1-4], eg -t 1   : Override hardware thread detection and use specified number of threads (1-4)
.IP \(bu 2
-x                  : Disable single-core RaspberryPi board detection
.IP \(bu 2
-1                  : Use single-core mode (game will run in one thread, plus sound)
.RE

.SH GETTING STARTED
The following assumes that the game was downloaded and built in your home directory as ~/cannonball-se.
.PP
To run cannonball, copies of the original arcade ROMs are needed (more info in the ROMs section below) - copy these to ~/cannonball/roms before proceeding.
.PP
To start the game, "cd ~/cannonball-se" then "build/cannonball-se".

.SH CONTROLS
The default keyboard controls are:
.RS
.IP \(bu 2
Start Game (in free-play mode)                   - S
.IP \(bu 2
Coin In (starts game when not in-free play mode) - C
.IP \(bu 2
Accelerate                                       - A
.IP \(bu 2
Brake                                            - Z
.IP \(bu 2
Select Low Gear                                  - G
.IP \(bu 2
Select High Gear                                 - H
.IP \(bu 2
Steer Left/Right                                 - Left/Right Arrows
.IP \(bu 2
Change View                                      - V
.IP \(bu 2
Menu                                             - M
.IP \(bu 2
Up/down (in menu)                                - Up/Down Arrows
.IP \(bu 2
Select option or change value in menu            - S
.IP \(bu 2
Quit Game (Master Break Key)                     - Escape
.RE
.PP
These can also be changed within the game (menu, settings, controls, redefine keys) and the master break key (Escape) can be changed to F10 in Menu, Settings.

.SH STEERING WHEELS
Steering wheels, joysticks and gamepads can be setup in the game (menu, settings, controls, redefine gamepad).

.SH ROMS
CannonBall needs a copy of the OutRun 'revision B' romset to function. These should be copied to the roms subdirectory
(usually ~/cannonball/roms). Please see the file roms.txt for file names and other information.
.PP
\fBIMPORTANT:\fP Users of CannonBall (and CannonBall-SE) are expected to own licensed copies of the original arcade ROMs that
are needed for the program to function. The use of ROM images may be restricted by copyright or other laws depending on jurisdiction.
The end-user assumes all responsibility in respect of the use of original ROMs.

.SH CUSTOM MUSIC
.PP
As well as the three seminal tracks provided in the Outrun ROMs, CannonBall-SE supports custom music playback via .WAV and .MP3
files. These can be used to replace the built-in music, or to add additional tracks to the list on the radio screen at the start of
the game. To use this feature, simply copy your music tracks in .WAV or .MP3 format to the res directory, and name them as:
.PP
[01–99]_Track_Display_Name.[wav|mp3|ym] - e.g. 04_AHA_Take_On_Me.mp3
.PP
Indexes 01–03 will replace the built‑in tracks (01=Magical Sound Shower), and indexes 04 and higher will add tracks to the list.
To ensure compatibility, set the game to 44.1kHz sample rate in config.xml (this is the default) and ensure your files are
also 44.1kHz, 16-bit stereo.

.SH FUNCTIONALITY
.PP
On top of the game port provided by CannonBall, CannonBall-SE provides:
.RS
.IP \(bu 2
Video-processing enhancements - an accurate NTSC filter (Blargg's SNES library), subtle screen curvature effect, analogue noise,
shadow mask effect, and a smooth bezel mask.
.IP \(bu 2
Enhanced audio module that provides consistent, pop-free audio and custom music via MP3 playback.
.IP \(bu 2
Enhanced rumble support for compatible steering wheels (rumbles on tyre smoke).
.IP \(bu 2
Performance enhacements and automatic frame rate selection.
.IP \(bu 2
Play count and 'machine hours' tracking (menu, about).
.IP \(bu 2
Various stablity and bug fixes.
.RE

.SH CHOOSING A PLATFORM
.PP
Cannonball-SE is optimised for RaspberryPi boards with RaspberryPi OS, and also runs on any Intel/AMD PC with Ubuntu. All
RaspberryPi boards are supported.
.PP
If you have a spare Pi, PC, or laptop - it can probably run CannonBall-SE and any USB steering wheel should work - Thrustmaster
Ferarri branded wheels are readily available on popular auction sites.
.PP
Pi4 easily achieves 60fps at 1080p and its 4 USB ports provide connectivity for a steering wheel, external amplifier/DSP, case
fan, and a keyboard for diagnostics when needed. Higher resolution screens will need more power (Pi5 or Intel/AMD). When using any
multi-core Pi, a CPU heatsink is required.
.PP
The game has automatic frame-rate control and drops frames as needed to keep gameplay at full speed on all systems.
For Pi2/Pi3 users (and assuming 1280x1024):
.RS
.IP \(bu 2
Pi2 (v1.1): 30fps in hi-res mode, 60fps in original res (use Fast Shader, Fast S16 Emulation, and Overlay Mask).
.IP \(bu 2
Pi2 (v1.2), Pi3, and Pi-Zero2W: 60fps in hi-res mode with Fast shader at stock clocks. Set GPU to 400MHz to use Full shader.
.RE
.PP
For single-core Pi Boards e.g. Pi1 and Pi-Zero(W), the following settings are automatically applied at launch:
.RS
.IP \(bu 2
Orignal resolution
.IP \(bu 2
30 FPS
.IP \(bu 2
Full shader
.IP \(bu 2
Blargg NTSC filter disabled
.IP \(bu 2
16ms sound callback
.RE
.PP
Use HDMI audio for best performance.
.PP
.SH STUTTERING AUDIO
.PP
Potential causes of stuttering audio include:
.RS
.IP \(bu 2
The Pi USB stack is known to be problematic with USB audio devices (see
<http://www.raspyfi.com/anatomy-of-a-pi-usb-audio-quality-and-related-issues-on-pi/>). For Pi2, Pi3, and Pi-Zero2W users,
USB ports need to be put in 'full speed' mode when using external USB audio (add 'dwc_otg.speed=1' to /boot/firmware/cmdline.txt).
Unforutnately, on Pi2 v1.2, Pi3 and Pi-Zero2W, this appears to prevent most USB keyboards working (though steering wheels are
generally OK). Workaround is to use a bluetooth keyboard or to SSH.
.IP \(bu 2
The system may struggle to keep up with the sound callback rate. This is most noticable on the Pi2 when using 60fps mode with the
analogue audio output. Fix is to switch the game from 8ms to 16ms callback (Menu/Settings/Sound/Music/Callback Rate).
.IP \(bu 2
HDMI audio on Pi boards is handled by the GPU, so is almost free. Analogue audio and USB connected devices are processed on CPU,
which impacts frame-rate on Pi1 and Pi2 boards and may introduce stutter.
.IP \(bu 2
The fkms video driver (which is needed for HDMI audio on Pi 1 boards) causes lower frame rates and stuttering audio. Use kms driver
and analogue audio instead.
.RE
.PP
.SH WATCHDOG SUPPORT
.PP
For systems with a hardware watchdog (including all RaspberryPi boards), CannonBall-SE hooks this so that the system will be
automatically rebooted if a hang occurs, for example due to aggressive overclocking.

.SH SEE ALSO
Original CannonBall Wiki     : <github.com/djyt/cannonball/wiki>
.PP
Original CannonBall Manual   : <github.com/djyt/cannonball/wiki/Cannonball-Manual>

.SH BUGS
Please log bugs relating to CannonBall-SE at: <github.com/J1mbo/cannonball-se/issues>

.SH AUTHORS
James Pearce <github.com/J1mbo>
.PP
Original engine: Chris White <github.com/djyt/cannonball/wiki>

.SH COPYRIGHT
.RS
.IP \(bu 2
Original CannonBall engine Copyright © 2012–2024 Chris White <github.com/djyt/cannonball>
.IP \(bu 2
S16 video emulation Copyright © 2019–2024 Aaron Giles
.IP \(bu 2
S16 sound emulation Copyright © 1998-2008 Atari800 development team
.IP \(bu 2
YM2151 emulation Copyright © 1997-2002 Jarek Burczynski as distributed with MAME source code.
.IP \(bu 2
NTSC filter Copyright © 2006–2007 Shay Green ('Blargg').
S16 pallete based initialisation and SIMD blitter Copyright © 2025 James Pearce
.IP \(bu 2
Linux Force-Feedback Support Based on work Copyright © 2020 Ismas and Johan Deneux
.IP \(bu 2
CannonBall-SE enhancements Copyright © 2020–2025 James Pearce, <github.com/J1mbo/cannonball-se>
.RE
.PP
\fBOutRun is a trademark of the SEGA Corporation. This project is not affiliated with SEGA in any way.\fP

.SH LICENSE
See the file \fIdocs/license.txt\fP in the distribution root for full license terms, and \fIdocs/THIRD-PARTY-NOTICES.md\fP
for information pertaining to third-party code included.
.PP
Your use of this software signifies acceptance of these terms.
